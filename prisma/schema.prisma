generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(255)
  email           String           @unique @db.VarChar(255)
  password        String?
  gender          String?
  category        String?
  profilePicture  String?
  availability    String?
  grade           String?
  createdAt       DateTime         @default(now())
  articleComments articleComment[]
  cart            cart?
  certificates    certificate[]
  orders          orderInvoice[]
  progression     progressions[]
  rating          review[]
  courses         studentCourse[]
  wishlist        wishlist?
  answeredFAQ     courseFAQAnswers[]
  questions       courseFAQ[]
}

model SuperAdmin {
  id           Int      @id @default(autoincrement())
  name         String?  @db.VarChar(255)
  email        String?  @unique @db.VarChar(255)
  password     String?
  availability String?
  createdAt    DateTime @default(now())
}

model admin {
  id           Int      @id @default(autoincrement())
  name         String?  @db.VarChar(255)
  email        String?  @unique @db.VarChar(255)
  password     String?
  availability String?
  createdAt    DateTime @default(now())
}

model tutor {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  email          String?   @unique @db.VarChar(255)
  password       String?
  idNumber       String
  address        String    @db.VarChar(500)
  forDisabled    Boolean   @default(false)
  profilePicture String
  about          String?   @db.VarChar(5000)
  speciality     String?
  experience     String?
  education      String?
  rating         Int?
  fbUrl          String?
  linkedInUrl    String?
  twitterUrl     String?
  instagramUrl   String?
  verified       Boolean   @default(false)
  availability   String?
  createdAt      DateTime  @default(now())
  articles       article[]
  courses        course[]
}

model course {
  id               Int                 @id @unique @default(autoincrement())
  name             String?             @db.VarChar(255)
  description      String?             @db.VarChar(50000)
  price            Int?
  tutorId          Int
  image            String?
  isPublished      Boolean             @default(false)
  verified         Boolean             @default(false)
  level            String?
  objectives       String?
  requirements     String?
  createdAt        DateTime            @default(now())
  cartProducts     cartProducts[]
  category         categorisedCourse[]
  certificate      certificate?
  tutor            tutor               @relation(fields: [tutorId], references: [id])
  sections         courseSections[]
  orders           orderedCourses[]
  rating           review[]
  student          studentCourse[]
  wishlistProducts wishlistProducts[]
  keywords         courseKeywords[]
  faq              courseFAQ[]
}

model keywords{
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  courses   courseKeywords[]
}

model courseKeywords{
  id        Int      @id @default(autoincrement())
  courseId  Int
  keywordId Int
  keyword   keywords @relation(fields: [keywordId], references: [id])
  course    course   @relation(fields: [courseId], references: [id])
}

model courseFAQ{
  id        Int     @unique @id @default(autoincrement())
  courseId  Int
  lessonId  Int
  userId    Int
  questionTitle String @db.VarChar(255)
  questionBody  String   @db.VarChar()
  answer    courseFAQAnswers[]
  createdAt DateTime @default(now())
  course    course   @relation(fields: [courseId], references: [id])
  lesson    lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model courseFAQAnswers{
  id        Int      @id @default(autoincrement())
  faqId     Int
  userId    Int
  answer    String   @db.VarChar(5000)
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())
  faq       courseFAQ @relation(fields: [faqId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

}

model review {
  id        Int      @id @default(autoincrement())
  courseId  Int
  userId    Int
  rating    Int?
  review    String?  @db.VarChar(5000)
  createdAt DateTime @default(now())
  course    course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model category {
  id     Int                 @id @default(autoincrement())
  name   String              @unique @db.VarChar(255)
  type   Int
  course categorisedCourse[]
  icon  String?
  createdAt DateTime @default(now())
}

model categorisedCourse {
  id         Int      @id @default(autoincrement())
  courseId   Int
  categoryId Int
  category   category @relation(fields: [categoryId], references: [id])
  course     course   @relation(fields: [courseId], references: [id])
}

model studentCourse {
  id          Int       @id @default(autoincrement())
  studentId   Int
  courseId    Int
  progress    Int?
  completed   Boolean   @default(false)
  startedAt   DateTime?
  completedAt DateTime?
  course      course    @relation(fields: [courseId], references: [id])
  student     User      @relation(fields: [studentId], references: [id])
}

model courseSections {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  courseId    Int
  description String?  @db.VarChar(5000)
  createdAt   DateTime @default(now())
  published   Boolean  @default(false)
  course      course   @relation(fields: [courseId], references: [id])
  lessons     lesson[]
}

model lesson {
  id               Int            @id @default(autoincrement())
  name             String?        @db.VarChar(255)
  description      String?        @db.VarChar(5000)
  videoUrl         String?
  courseSectionsId Int
  createdAt        DateTime       @default(now())
  type             String
  isPreview        Boolean        @default(false)
  duration         Float?
  courseSections   courseSections @relation(fields: [courseSectionsId], references: [id])
  progressions     progressions[]
  courseFAQ        courseFAQ[]
}

model progressions {
  studentId Int
  lessonId  Int
  progress  Float?
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  lesson    lesson   @relation(fields: [lessonId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@id([studentId, lessonId])
}

model discount {
  id         Int       @id @default(autoincrement())
  code       String    @unique @db.VarChar(255)
  discount   Decimal?
  expiryDate DateTime?
}

model permissions {
  id            Int     @id @default(autoincrement())
  name          String  @unique @db.VarChar(255)
  role          String? @db.VarChar(255)
  permissionFor String? @db.VarChar(255)
  status        Boolean @default(false)
}

model article {
  id          Int              @id @default(autoincrement())
  title       String?          @db.VarChar(255)
  content     String?          @db.VarChar
  authorId    Int
  publishedAt DateTime?
  verified    Boolean          @default(false)
  author      tutor            @relation(fields: [authorId], references: [id])
  comments    articleComment[]
}

model articleComment {
  id        Int       @id @default(autoincrement())
  articleId Int
  userId    Int
  content   String?   @db.VarChar(5000)
  createdAt DateTime?
  article   article   @relation(fields: [articleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model session {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(255)
  date      DateTime?
  startTime DateTime?
  endTime   DateTime?
  status    String?
  createdAt DateTime  @default(now())
}

model certificate {
  id              Int       @id @default(autoincrement())
  courseId        Int       @unique
  studentId       Int
  issuedAt        DateTime?
  certificateUrl  String?
  verified        Boolean   @default(false)
  certificateName String?   @db.VarChar(255)
  qualification   String?   @db.VarChar(255)
  course          course    @relation(fields: [courseId], references: [id])
  student         User      @relation(fields: [studentId], references: [id])
}

model cart {
  id           Int            @id @default(autoincrement())
  userId       Int            @unique
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  cartProducts cartProducts[]
}

model cartProducts {
  cartId        Int
  courseId      Int
  createdAt     DateTime @default(now())
  savedForLater Boolean  @default(false)
  cart          cart     @relation(fields: [cartId], references: [id])
  course        course   @relation(fields: [courseId], references: [id])

  @@id([cartId, courseId])
}

model wishlist {
  id               Int                @id @default(autoincrement())
  userId           Int                @unique
  createdAt        DateTime           @default(now())
  user             User               @relation(fields: [userId], references: [id])
  wishlistProducts wishlistProducts[]
}

model wishlistProducts {
  wishlistId Int
  courseId   Int
  createdAt  DateTime @default(now())
  course     course   @relation(fields: [courseId], references: [id])
  wishlist   wishlist @relation(fields: [wishlistId], references: [id])

  @@id([wishlistId, courseId])
}

model orderInvoice {
  id          Int              @id @default(autoincrement())
  orderName   String
  userId      Int
  createdAt   DateTime         @default(now())
  transaction transaction      @relation(fields: [id], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  products    orderedCourses[]
}

model orderedCourses {
  id           Int          @id @default(autoincrement())
  orderId      Int
  courseId     Int
  createdAt    DateTime     @default(now())
  course       course       @relation(fields: [courseId], references: [id])
  orderInvoice orderInvoice @relation(fields: [orderId], references: [id])
}

model transaction {
  id                Int           @id @default(autoincrement())
  amount            Decimal?
  transactionId     String
  transactionStatus String?
  createdAt         DateTime      @default(now())
  orderInvoice      orderInvoice?
}

enum lessonType {
  VIDEO
  TEXT
  AUDIO
}
