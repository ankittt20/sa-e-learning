// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(255)
  email    String  @unique @db.VarChar(255)
  password String?
  gender   String?
  category String?
  courses studentCourse[]
  profilePicture String?
  articleComments articleComment[]

}

model SuperAdmin {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(255)
  email    String?  @unique @db.VarChar(255)
  password String?
}

model admin{
  id       Int      @id @default(autoincrement())
  name     String?   @db.VarChar(255)
  email    String?   @unique @db.VarChar(255)
  password String?
}

model tutor{
  id       Int      @id @default(autoincrement())
  name     String?   @db.VarChar(255)
  email    String?   @unique @db.VarChar(255)
  password String?
  idNumber String
  address  String     @db.VarChar(500)
  forDisabled Boolean @default(false)
  profilePicture String
  about String?        @db.VarChar(5000)
  speciality String?
  experience String?
  education String?
  rating Int?
  fbUrl String?
  linkedInUrl String?
  twitterUrl String?
  instagramUrl String?
  courses course[]
  articles article[]
  verified Boolean @default(false)
}

model course{
  id       Int      @id @default(autoincrement())
  name     String?   @db.VarChar(255)
  description String? @db.VarChar(50000)
  price Int?
  tutorId Int
  tutor tutor @relation(fields: [tutorId], references: [id])
  category categorisedCourse[]
  student studentCourse[]
  sections courseSections[]
  rating Int?
  image String?
  isPublished Boolean @default(false)
  verified Boolean @default(false)
  level String?
  requirements String?
  objectives String?
}

model category{
  id       Int      @id @default(autoincrement())
  name     String   @unique @db.VarChar(255)
  course categorisedCourse[]
  type Int
}

model categorisedCourse{
  id       Int      @id @default(autoincrement())
  courseId Int
  categoryId Int
  course course @relation(fields: [courseId], references: [id])
  category category @relation(fields: [categoryId], references: [id])
}

model studentCourse{
  id       Int      @id @default(autoincrement())
  studentId Int
  courseId Int
  student User @relation(fields: [studentId], references: [id])
  course course @relation(fields: [courseId], references: [id])
  progress Int?
  completed Boolean @default(false)
  startedAt DateTime?
  completedAt DateTime?
}

model courseSections{
  id       Int      @id @default(autoincrement())
  name     String?   @db.VarChar(255)
  courseId Int
  course course @relation(fields: [courseId], references: [id])
  lessons lesson[]
}

model lesson{
  id       Int      @id @default(autoincrement())
  name     String?   @db.VarChar(255)
  description String? @db.VarChar(5000)
  videoUrl String?
  courseSectionsId Int
  courseSections courseSections @relation(fields: [courseSectionsId], references: [id])
}

model discount{
  id       Int      @id @default(autoincrement())
  code     String   @unique @db.VarChar(255)
  discount Decimal?
  expiryDate DateTime?
  purpose String?
}

model article{
  id       Int      @id @default(autoincrement())
  title    String?   @db.VarChar(255)
  content String? @db.VarChar()
  authorId Int
  author  tutor @relation(fields: [authorId], references: [id])
  publishedAt DateTime?
  verified Boolean @default(false)
  comments articleComment[]
}

model articleComment{
  id       Int      @id @default(autoincrement())
  articleId Int
  userId Int
  content String? @db.VarChar(5000)
  article article @relation(fields: [articleId], references: [id])
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime?
}